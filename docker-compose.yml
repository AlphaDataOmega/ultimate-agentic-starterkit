version: '3.8'

services:
  # Main StarterKit application
  starterkit:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.11
    container_name: starterkit_app
    volumes:
      # Mount source code for development
      - .:/app
      # Mount logs directory
      - ./logs:/app/logs
      # Mount workspace for agent operations
      - ./workspace:/app/workspace
      # Mount temp directory
      - ./temp:/app/temp
      # Mount output directory
      - ./output:/app/output
    environment:
      # Development environment
      - ENVIRONMENT=development
      - DEBUG=true
      - TEST_MODE=false
      
      # Logging configuration
      - LOG_LEVEL=INFO
      - LOG_FILE_PATH=/app/logs/starterkit.log
      - LOG_STRUCTURED=true
      - LOG_ROTATION=true
      - LOG_MAX_SIZE=10MB
      - LOG_BACKUP_COUNT=5
      
      # Voice alerts
      - VOICE_ALERTS_ENABLED=true
      - VOICE_RATE=200
      - VOICE_VOLUME=0.7
      - VOICE_VOICE_ID=0
      
      # Agent configuration
      - MIN_CONFIDENCE_THRESHOLD=0.7
      - HIGH_CONFIDENCE_THRESHOLD=0.9
      - MAX_RETRY_ATTEMPTS=3
      - AGENT_TIMEOUT=300
      - TASK_TIMEOUT=600
      
      # Performance settings
      - ASYNC_CONCURRENCY_LIMIT=10
      - RATE_LIMIT_RPM=60
      - MEMORY_LIMIT_MB=2048
      
      # Directory paths
      - PROJECT_WORK_DIR=/app/workspace
      - TEMP_DIR=/app/temp
      - OUTPUT_DIR=/app/output
    env_file:
      - .env
    ports:
      - "8000:8000"  # For future web interface
    networks:
      - starterkit_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "from StarterKit.core.config import get_config; print('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres
    
  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: starterkit_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - starterkit_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: starterkit_postgres
    environment:
      - POSTGRES_DB=starterkit
      - POSTGRES_USER=starterkit
      - POSTGRES_PASSWORD=starterkit_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - starterkit_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U starterkit"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  # Development tools container
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: starterkit_dev_tools
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=development
    networks:
      - starterkit_network
    profiles:
      - dev
    command: tail -f /dev/null  # Keep container running
    
  # Testing container
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: starterkit_test_runner
    volumes:
      - .:/app
    environment:
      - ENVIRONMENT=testing
      - TEST_MODE=true
    networks:
      - starterkit_network
    profiles:
      - test
    command: pytest tests/ -v --cov=StarterKit --cov-report=html
    depends_on:
      - redis
      - postgres

networks:
  starterkit_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local